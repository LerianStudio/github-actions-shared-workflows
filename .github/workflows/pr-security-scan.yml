name: "PR Security Scan"

# This reusable workflow handles security scanning for pull requests
# - If filter_paths is provided: treats as monorepo and scans changed components
# - If filter_paths is empty/not provided: treats as single app and scans entire repo

on:
  workflow_call:
    inputs:
      runner_type:
        description: 'GitHub runner type to use'
        type: string
        default: 'ubuntu-latest'
      filter_paths:
        description: 'Paths to monitor for changes (newline separated). If not provided, treats as single app repo'
        type: string
        required: false
      path_level:
        description: 'Directory depth level to extract app name (only used for monorepo)'
        type: string
        default: '2'
      dockerhub_org:
        description: 'DockerHub organization name'
        type: string
        default: 'lerianstudio'
    secrets:
      manage_token:
        description: 'GitHub token for accessing private repositories during Docker build'
        required: false

permissions:
  id-token: write       # Required for OIDC authentication
  contents: read        # Required to checkout the repository
  pull-requests: write  # Allows commenting on PRs
  security-events: write # Required for security scanning

jobs:
  detect_changes:
    if: inputs.filter_paths != ''
    runs-on: ${{ inputs.runner_type }}
    outputs:
      matrix: ${{ steps.changed-paths.outputs.matrix }}
    name: Detect changed paths
    steps:
      - name: Get changed paths
        id: changed-paths
        uses: LerianStudio/github-actions-changed-paths@main
        with:
          filter_paths: |-
            ${{ inputs.filter_paths }}
          get_app_name: true
          path_level: ${{ inputs.path_level }}

  security_scan:
    runs-on: ${{ inputs.runner_type }}
    if: always() && (inputs.filter_paths == '' || (needs.detect_changes.outputs.matrix != '[]'))
    needs: [detect_changes]
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        app: ${{ inputs.filter_paths == '' && fromJson('[{"name": "single-app", "working_dir": "."}]') || fromJson(needs.detect_changes.outputs.matrix) }}
    env:
      DOCKERHUB_ORG: ${{ inputs.dockerhub_org }}
      APP_NAME: ${{ inputs.filter_paths == '' && github.event.repository.name || matrix.app.name }}
      DOCKERFILE_PATH: ${{ inputs.filter_paths == '' && './Dockerfile' || format('{0}/Dockerfile', matrix.app.working_dir) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ----------------- Security Scans -----------------
      - name: Trivy Secret Scan - Repository (Table Output)
        uses: aquasecurity/trivy-action@0.28.0
        if: always()
        with:
          scan-type: fs
          scan-ref: .
          format: table
          exit-code: '1'
          hide-progress: true
          security-checks: secret
          skip-dirs: '.git,node_modules,dist,build,.next,coverage,vendor'

      - name: Trivy Secret Scan - Repository (SARIF Output)
        uses: aquasecurity/trivy-action@0.28.0
        if: always()
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: 'trivy-secret-scan-repo-${{ env.APP_NAME }}.sarif'
          exit-code: '0'
          hide-progress: true
          security-checks: secret
          skip-dirs: '.git,node_modules,dist,build,.next,coverage,vendor'

      - name: Build Docker Image for Scanning
        if: always()
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}:pr-scan-${{ github.sha }}
          secrets: ${{ secrets.manage_token && format('github_token={0}', secrets.manage_token) || '' }}

      - name: Trivy Vulnerability Scan - Docker Image (Table Output)
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}:pr-scan-${{ github.sha }}'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Trivy Vulnerability Scan - Docker Image (SARIF Output)
        if: always()
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ env.DOCKERHUB_ORG }}/${{ env.APP_NAME }}:pr-scan-${{ github.sha }}'
          format: sarif
          output: 'trivy-vulnerability-scan-docker-${{ env.APP_NAME }}.sarif'
          ignore-unfixed: true
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          exit-code: '0'  # Do not fail; gate failures in the table step

      ## To be fixed
      # - name: Upload Secret Scan Results - Repository (SARIF) to GitHub Security Tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   continue-on-error: true
      #   with:
      #     sarif_file: 'trivy-secret-scan-repo-${{ env.APP_NAME }}.sarif'

      # - name: Upload Vulnerability Scan Results - Docker Image (SARIF) to GitHub Security Tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   continue-on-error: true
      #   with:
      #     sarif_file: 'trivy-vulnerability-scan-docker-${{ env.APP_NAME }}.sarif'
