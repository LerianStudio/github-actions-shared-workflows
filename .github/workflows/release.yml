name: "Release Workflow"

# This reusable workflow handles semantic versioning and release management
# It creates releases based on conventional commits and manages version tags

on:
  workflow_call:
    secrets:
      lerian_studio_push_bot_app_id:
        required: true
      lerian_studio_push_bot_private_key:
        required: true
      lerian_ci_cd_user_gpg_key:
        required: true
      lerian_ci_cd_user_gpg_key_password:
        required: true
      lerian_ci_cd_user_name:
        required: true
      lerian_ci_cd_user_email:
        required: true
    inputs:
      semantic_version:
        description: 'Semantic release version to use'
        type: string
        default: '23.0.8'
      runner:
        description: 'Runner to use for the workflow'
        type: string
        default: 'ubuntu-24.04'

jobs:
  publish_release:
    runs-on: ${{ inputs.runner }}
    environment:
      name: create_release
    name: Create Release

    outputs:
      gpg_fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}

    steps:
      # Generate GitHub App token for authentication
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.lerian_studio_push_bot_app_id }}
          private-key: ${{ secrets.lerian_studio_push_bot_private_key }}

      # Checkout repository with shallow clone
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure we get the full git history including tags

      # Checkout again with the app token for authentication
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      # Sync with remote branch
      - name: Sync with remote branch
        run: |
          git fetch origin ${{ github.ref_name }}
          git reset --hard origin/${{ github.ref_name }}

      # Import GPG key for signing commits
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.lerian_ci_cd_user_gpg_key }}
          passphrase: ${{ secrets.lerian_ci_cd_user_gpg_key_password }}
          git_committer_name: ${{ secrets.lerian_ci_cd_user_name }}
          git_committer_email: ${{ secrets.lerian_ci_cd_user_email }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Initialize package.json if it doesn't exist
      - name: Init package.json
        run: npm init -y

      # Install semantic-release plugins
      - name: Install missing plugin @semantic-release/exec
        run: npm install --save-dev @semantic-release/exec

      # Use .releaserc.yml configuration file
      - name: Set releaserc path
        id: releaserc
        run: |
          echo "path=.releaserc.yml" >> $GITHUB_OUTPUT

      # Run semantic release to create version tags based on conventional commits
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          ci: false
          semantic_version: ${{ inputs.semantic_version }}
          extra_plugins: |
            conventional-changelog-conventionalcommits@v7.0.2
            @saithodev/semantic-release-backmerge
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          GIT_AUTHOR_NAME: ${{ secrets.lerian_ci_cd_user_name }}
          GIT_AUTHOR_EMAIL: ${{ secrets.lerian_ci_cd_user_email }}
          GIT_COMMITTER_NAME: ${{ secrets.lerian_ci_cd_user_name }}
          GIT_COMMITTER_EMAIL: ${{ secrets.lerian_ci_cd_user_email }}

